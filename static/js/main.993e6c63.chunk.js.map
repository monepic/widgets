{"version":3,"sources":["Clock.js","serviceWorker.js","index.js"],"names":["Hands","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","seconds","arc","radius","second","width","height","offset","minute","hour","handleVisibilityChange","console","log","document","hidden","init","cd","Date","getSeconds","getMilliseconds","minutes","getMinutes","hours","getHours","setState","addEventListener","removeEventListener","circ","Math","PI","strokeDasharray","strokeDashoffset","animationDelay","concat","react_default","a","createElement","Fragment","className","style","arcStyle","r","x","y","Component","Ticks","_ref","i","margin","isMajor","ticks","push","key","transform","tickWidth","Boolean","window","location","hostname","match","ReactDOM","render","viewBox","Clock_Ticks","Clock_Hands","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.993e6c63.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Clock.css';\n\nexport default () => {\n    const radius = 80;\n    return <svg viewBox=\"-100 -100 200 200\" height=\"100vh\" >\n        <circle className=\"edge\" r={radius} />\n        <Ticks radius={radius} />\n        <Hands radius={radius} />\n    </svg>\n}\n\nclass Hands extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state={seconds:0};\n\n        this.arc = {\n            radius: props.radius + 4\n        }\n\n        this.second = {\n            width:1,\n            height: props.radius,\n            offset:5\n        };\n\n        this.minute = {\n            width:3,\n            height: props.radius * 0.75,\n            offset: 5 \n        };\n        this.hour = {\n            width: 3,\n            height: props.radius * 0.5,\n            offset: 5\n        }\n\n        this.handleVisibilityChange = () => {\n            console.log(\"handleVisibilityChange - hidden:\", document.hidden);\n            if(!document.hidden) {\n                console.log(\"reinit\");\n                this.init();\n            }\n        }\n    }\n\n    init() {\n        const cd = new Date();\n        const seconds = cd.getSeconds() + cd.getMilliseconds()/1000;\n        const minutes = cd.getMinutes() + seconds/60;\n        const hours = cd.getHours() + minutes/60;\n\n        this.setState(state => ({\n            seconds, minutes, hours\n        }));\n    }\n\n    componentDidMount() {\n        this.init();            \n        document.addEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('visibilitychange', this.handleVisibilityChange);\n    }\n\n    arcStyle() {\n        const circ = 2*Math.PI*this.arc.radius\n        return {\n            strokeDasharray: circ,\n            strokeDashoffset:circ,\n            animationDelay:`${-this.state.seconds}s`\n        }\n    }\n\n    render() {\n\n        return <>\n            <circle className='second-arc' style={this.arcStyle()} r={this.arc.radius} />\n            <rect className='second-hand'\n                x={-this.second.width/2}\n                y={-this.second.height + this.second.offset} \n                width={this.second.width} \n                height={this.second.height} \n                style={{animationDelay:`${-this.state.seconds}s`}} />\n            <rect className='minute-hand'\n                x={-this.minute.width/2} \n                y={-this.minute.height + this.minute.offset} \n                width={this.minute.width} \n                height={this.minute.height}\n                style={{animationDelay:`${-this.state.minutes * 60}s`}} />\n            <rect className='hour-hand'\n                x={-this.hour.width/2}\n                y={-this.hour.height + this.hour.offset}\n                width={this.hour.width}\n                height={this.hour.height}\n                style={{animationDelay:`${-this.state.hours * 60 * 60}s`}} />\n            </>\n    }\n}\n\nconst Ticks = ({radius}) => {\n    const n = 12;\n    const tickWidth = 2;\n    const margin=radius*0.05;\n\n    const isMajor = i => 360/n*i%90===0;\n\n    let i;\n    const ticks = [];\n    for (i=0; i<n; i++) {\n\n        ticks.push(isMajor(i) ? <rect key ={i} y={-radius + margin} x={-tickWidth/2} width={tickWidth} height=\"15\" transform={`rotate(${360/n*i}, 0, 0)`} /> :\n            <rect key={i} y = {-radius + margin + 5} x={tickWidth/4} width={tickWidth/2} height=\"5\" transform={`rotate(${360/n*i}, 0, 0)`} />);\n    }\n    return ticks;\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Clock from './Clock';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Clock />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}